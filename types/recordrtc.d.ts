/** Declaration file generated by dts-gen */

export = recordrtc;

declare function recordrtc(mediaStream: any, config: any): any;

declare namespace recordrtc {
    const Storage: {
    };

    const version: string;

    function CanvasRecorder(htmlElement: any, config: any): any;

    function GifRecorder(mediaStream: any, config: any): any;

    function MRecordRTC(mediaStream: any): any;

    function MediaStreamRecorder(mediaStream: any, config: any): any;

    function MultiStreamRecorder(arrayOfMediaStreams: any, options: any): any;

    function RecordRTCPromisesHandler(mediaStream: any, options: any): any;

    function StereoAudioRecorder(mediaStream: any, config: any): any;

    class WebAssemblyRecorder {
        constructor(stream: any, config: any);
        record(): void;
        pause(): void;
        resume(): void;
        stop(cb: (blob: Blob) => void): void;
        clearRecordedData(): void;
        toString(): string;
        name: string;
        isPaused: boolean;
        blob: Blob;
    }

    function WhammyRecorder(mediaStream: any, config: any): any;

    function bytesToSize(bytes: any): any;

    function getFromDisk(type: any, callback: any): void;

    function getSeekableBlob(inputBlob: any, callback: any): void;

    function getTracks(stream: any, kind: any): any;

    function invokeSaveAsDialog(file: any, fileName: any): any;

    function isElectron(): any;

    function writeToDisk(options: any): void;

    namespace DiskStorage {
        const dataStoreName: string;

        const dbName: any;

        function Fetch(callback: any): any;

        function Store(config: any): any;

        function init(): void;

        function onError(error: any): void;

    }

    namespace MRecordRTC {
        function getFromDisk(type: any, callback: any): void;

        function writeToDisk(options: any): void;

    }

    namespace Whammy {
        class Video {
            constructor(duration: any);

            add(frame: any, duration: any): void;

            compile(callback: any): void;

        }

    }

}

